[INSTALLATION]

[1. Obtaining xmind maps]

	There are several ways to do this. If you have your own mind maps that you want
	to search through you can jump to point 2. Otherwise you have to:

		- Get some of those on your own
		- Run xms_git.py

	Second case is preferred if you just want to test this software or want to
	get the data from someone else's mind maps.

	[OBTAINING MIND MAPS VIA PROVIDED SCRIPT]

		Script xms_git.py connects with github and clones repositories from a selected user
		After correct run (see below) program will ask you for your GitHub account password.

		[FROM YOUR OWN REPOSITORY]

			run: $ xms_git.py -u <username> -p <path> [-f <format>]

			<username> - your GitHub username. Required, as it allows the program to connect with
			GitHub-Python API

			<path> - where you want to download the repositories. I would advice downloading
			them into the same directory, e.g. -p Notes will download all of the repositories
			into Notes folder located in your current directory, unless you know what you're doing

			<format> - optional flag, defines name format for XMind Maps.
			Default will download all of them, if you specify, e.g. -f Notes
			only folders including name Notes (case sensitive) will be cloned.

		[FROM ANOTHER PERSON REPOSITORY]

			run: $ python xms_git.py -u <username> -p <path> [-n <nickname>] [-f <format>]

			<nickname> - allows you to download mind maps from other users, where nickname
			is the github username (not nickname!) BEWARE --ssh / -s flag as it may break
			the program, I would advice not to use in this case.

		[CUSTOMIZED xms_git.py run]

			More information for sciprt xms_git.py provided by running xms_git.py -h
			It allows to specify custom repository formats, download via ssh or specify
			other user from whom you'd like to fetch your data.

[2. Initializing database]

		[OVERALL PROCEDURE]

			!!! YOU NEED MySQL SERVER RUNNING LOCALLY OR REMOTELY !!!
			!!! YOU NEED WRITE AND READ ACCES TO SPECIFIED SERVER !!!

			1. Script init.py initializes MySQL's hierachical database from your .xmind files
			This point needs a temporary fix as automatic procedure loading
			is currently out of order (sorry, will fix it :( ).

			2. First run of this script will crash and will only make database with table inside
			and root element.

			3. Afterwards you have to source src/procedures/setup_procedures.sql into the database, for example,
			in client (if you have write access to database, for example you are root and it's local),

			Example sourcing: mysql -u <username> [-p] < src/procedures/setup_procedures.sql

			For additional info do not hesitate to contact great MySQL reference
			and/or your MySQL vendor (e.g. MariaDB etc.)

			4. Re-run the script init.py with identical flags to create notes database

		[SCRIPT init.py]

			!!! READ OVERALL PROCEDURE BEFORE !!!

			As for every file in this project I've provided a little help using -h flag.

			[MINIMAL RUN]

				$ python init.py -u <username> -p <path>

				<username> - Your MySQL's username, you will be prompted for password

				<path> - directory containg your .xmind files (mind maps)
				(Provided by you or download via xms_git.py, look at point
				[1. Obtaining xmind maps])

			[EXTENDED RUN]

				python init.py -u <username> -p <path> [-f <format>] [-c <host>]
					[-d <database>] [-t <table>] [--char <character_set>] [--collation <collation>]
					[--experimental]

				FLAGS NOT WORKING (TO DO):
					-d, -t, -f

				OTHER FLAGS:
					<username> and <path> as described in minimal run
					<host> - IP or localhost of MySQL's server [DEFAULT: localhost]

					<character> - set used in database [DEFAULT: utf8mb4]
					<collation> -  collation used in connection with char [DEFAULT: utf8mb4_unicode_ci]

					--experimental Turns on experimental features (.xml files validation with
					XSD Schema). Requires xmllint installed (available under most Linux distributions)

[3. Running xms (XMind Searcher)]

		!!! GO THROUGH POINTS 1 (optional) AND 2 (required) BEFORE !!!

		Searches created database for keyword. Returns full branch/branches
		Keyword has to be exact match (for now, will be fixed)
		Only one keyword allow (for now, will be fixed), if you want complex query, use
		'query1 query2 ... queryN' (query included in ' ')

			$ python xms.py -h for help

		[RUNNING PROGRAM]

			$ python xms.py keyword -u <username> [-c <host>] [-d <database>]

			FLAGS NOT WORKING:
				-d

			OTHER FLAGS:
				keyword - positional argument, keyword to search for, see above

				<username> - MySQL's user name, you will be prompted for password
				<host> - IP or localhost of MySQL's server [DEFAULT: localhost]

				<database> - database from which to search (currently not available,
				needs fixing)
